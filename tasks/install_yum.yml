# file: postgresql/tasks/install_yum.yml

# The standard ca-certs are needed because  without them apt_key will fail to
# validate www.postgresql.org (or probably any other source).
- name: PostgreSQL | Make sure the CA certificates are available
  yum:
    name: ca-certificates
    state: present

# Pgdg repo section inspired from https://raw.githubusercontent.com/galaxyproject/ansible-postgresql/master/tasks/redhat.yml

# Using the rpm URL format of the yum module causes Ansible to download the rpm
# every time to check whether it's installed, so, don't do that.
- name: Check pgdg repository package (RedHat)
  yum: name="pgdg-{{ ansible_distribution | lower }}{{ postgresql_version | replace('.', '') }}" state=latest
  register: repo_pkg_installed
  ignore_errors: yes

# There's no direct way to determine the latest pacakge, so we have to use a
# helper script to parse the directory list and figure it out.
- name: Determine latest pgdg repository package (RedHat)
  script: get_repo_rpm_release.py {{ postgresql_yum_repository_base_url }}/{{ postgresql_version }}/{{ ansible_os_family | lower }}/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/ {{ ansible_distribution | lower }}
  register: pgdg_repo_pkg_name
  when: repo_pkg_installed.failed is defined and repo_pkg_installed.failed

- name: Install pgdg repository package (RedHat)
  yum: name={{ postgresql_yum_repository_base_url }}/{{ postgresql_version }}/{{ ansible_os_family | lower }}/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}/{{ pgdg_repo_pkg_name.stdout.strip() }}
  when: repo_pkg_installed.failed is defined and repo_pkg_installed.failed

- name: PostgreSQL | Blacklist CentOS PostgreSQL packages
  replace: |
    dest=/etc/yum.repos.d/CentOS-Base.repo \
    regexp='^\[{{ item }}\]\n(?!exclude=postgresql*)' \
    replace='[{{ item }}]\nexclude=postgresql*\n'
  with_items:
    - "base"
    - "updates"

- name: PostgreSQL | Make sure the dependencies are installed
  yum:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: ["python-psycopg2", "python-pycurl", "glibc-common"]

- name: PostgreSQL | Install PostgreSQL
  yum:
    name: "{{ item }}"
    state: present
  environment: "{{ postgresql_env }}"
  with_items:
    - "postgresql{{ postgresql_version_terse }}-server"
    - "postgresql{{ postgresql_version_terse }}"
    - "postgresql{{ postgresql_version_terse }}-contrib"

- name: PostgreSQL | PGTune
  yum:
    name: pgtune
    state: present
  environment: "{{ postgresql_env }}"
  when: postgresql_pgtune

# FIXME in contrib now?
#- name: PostgreSQL | pg_activity
  #yum:
    #name: pg_activity
    #state: present
  #environment: "{{ postgresql_env }}"
